#!/usr/bin/env python3
import argparse
import operator
import sys

class Task:
	def __init__(self, content):
		text = content.split('\n')[0].split(';')
		self._data = {}
		if len(text) >= 3:
			self._data['key']  = text[0]
			self._data['name'] = text[1]
			self._data['time'] = int(text[2])
			self._data['prec'] = text[3:len(text)] if len(text) >= 4 else []

			self._data['succ'] = []
			self.__dict__['begin_early'] = 0
			self._data['begin_last'] = 0
			self._data['end'] = 0
			self._data['deep'] = 0
		else :
			print("Incorrect content : " + content)

	def get_data(self, key) :
		try:
			return (self._data[key])
		except KeyError:
			return (self.__dict__[key])

	def set_data(self, key, val):
		self._data[key] = val

	def __str__(self) :
		return (str(self._data['key']) + "\t" +
			str(self._data['name']) + "\t" +
			str(self._data['begin_early']) + ":" +
			str(self._data['begin_last']) + ":" +
			str(self._data['time']) + ":" +
			str(self._data['end']) + "\t(" +
			str(self._data['deep']) + ")\t" +
			str(self._data['prec']) + "\t|$|\t" +
			str(self._data['succ']))

class Manager :
	def __init__(self, pathfile) :
		self._data = {}
		self._data['tasks'] = []
		for line in pathfile :
			self._data['tasks'].append(Task(line))
		pathfile.close()
		self.succ_ctor()
		self.level_ctor()
		self.early_ctor()
		self.last_ctor()

	def task_of_key(self, k) :
		for t in self._data['tasks'] :
			if t.get_data('key') == k :
				return t
            
	def __str__(self) :
		return ''.join([str(d) + '\n' for d in self._data['tasks']])

	def succ_ctor(self) :
		for ts in self._data['tasks'] :
			for to in self._data['tasks'] :
				if to.get_data('key') != ts.get_data('key') :
					if ts.get_data('key') in to.get_data('prec') :
						tmp = ts.get_data('succ')
						tmp.append(to.get_data('key'))
						ts.set_data('succ', tmp)

	def deepness(self, key) :
		tmp = [0]
		for to in self._data['tasks'] :
			if to.get_data('key') != key  :
				if key in to.get_data('succ') :
					tmp.append(int(self.deepness(to.get_data('key'))))
		return (1 + max(tmp))
    
	def level_ctor(self) :
		for ts in list(self._data['tasks']) :
			ts.set_data("deep", int(self.deepness(ts.get_data('key'))))
		self._data['tasks'].sort(key=lambda ta: 1000*ta.get_data('deep')+ta.get_data('time'))  

	def early (self, key) :
		tmp = []
		if len(self.task_of_key(key).get_data('prec')) == 0 :
			return(self.task_of_key(key).get_data('end'))
		elif len(self.task_of_key(key).get_data('prec')) != 0 :
			for p in self.task_of_key(key).get_data('prec') :
				tmp.append(self.task_of_key(p).get_data('end'))
		return max(tmp)
        
	def early_ctor(self) :
		for ts in list(self._data['tasks']):
			if len(ts.get_data("prec")) == 0 :
				ts.set_data("end", int(ts.get_data('begin_early')) + int(ts.get_data('time'))) 
			else:
				ts.set_data("begin_early", int(self.early(ts.get_data('key'))))
			ts.set_data("end", ts.get_data('begin_early') + int(ts.get_data('time'))) 
		tmp = [0]
		for ts in list(self._data['tasks']) :
			tmp.append(ts.get_data("end"))
		self._data["total"] = max(tmp)

	def last(self, key) :
		if self.task_of_key(key).get_data('end') == self._data['total'] :
			return (int(self.task_of_key(key).get_data('begin_early')))
		elif len(self.task_of_key(key).get_data('succ')) == 0 :
				return (int(self._data["total"]) - int(self.task_of_key(key).get_data('time')))
		else :
			tmp = []
			for s in self.task_of_key(key).get_data('succ') :
				tmp.append(self.task_of_key(s).get_data('begin_last')  - int(self.task_of_key(key).get_data('time')))
		return (min(tmp))
    
	def last_ctor(self) :
		d = list(reversed(self._data['tasks']))
		for ts in d :
			ts.set_data("begin_last", int(self.last(ts.get_data('key'))))

	def line(self, sta, sto) :
		return ''.join(["=" if i >= sta else " " for i in range(sta + sto)])
            
	def display(self) :
		self._data['tasks'] = sorted(self._data['tasks'], key=operator.attrgetter('begin_early'))
		print("Total duration of construction: %s weeks\n"% str(self._data["total"]))
		for t in  list(self._data['tasks']) :
			if t.get_data("begin_early") == t.get_data("begin_last") :
				print(t.get_data("key") + " must begin at t=" + str(t.get_data("begin_early")))
			else :
				print(t.get_data("key") + " must begin between t=" + str(t.get_data("begin_early") + 1) + " and t=" + str(t.get_data("begin_last") - 1))
		print()
		for t in list(self._data['tasks']) :
			print(t.get_data("key") + "\t(" + str(t.get_data("begin_last") - t.get_data("begin_early")) + ")\t" + self.line(int(t.get_data("begin_early")), int(t.get_data("time"))))
     


def main():
	m = Manager(args.pathfile)
	m.display()

parser = argparse.ArgumentParser(description='305construction')
parser.add_argument("pathfile", help="pathfile name", type=argparse.FileType('r', encoding='iso-8859-1'))
try :
	args = parser.parse_args()
except :
	exit(84)

if __name__ == '__main__':
    main()